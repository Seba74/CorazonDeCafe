USE master;
GO

CREATE DATABASE CorazonDeCafe;
GO

USE CorazonDeCafe;
GO

CREATE TABLE categories
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE,
    status INT NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_CATEGORY_STATUS_CATEGORIES CHECK(status IN(0,1)),
    CONSTRAINT CHK_CREATEDAT_CATEGORIES CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_CATEGORIES CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_CATEGORIES_2 CHECK(updatedAt >= createdAt),

    CONSTRAINT CHK_CATEGORY_NAME_CATEGORIES CHECK(LEN(name) > 0),
    CONSTRAINT CHK_CATEGORY_NAME_CATEGORIES_2 CHECK(LEN(name) <= 20),
    CONSTRAINT CHK_CATEGORY_NAME_CATEGORIES_3 CHECK(name NOT LIKE '%[^a-zA-Z0-9 ]%'),
    CONSTRAINT CHK_CATEGORY_NAME_CATEGORIES_4 CHECK(name NOT LIKE '%  %'),
);
GO

CREATE TABLE types
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE,
    status INT NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_TYPE_STATUS_TYPES CHECK(status IN(0,1)),
    CONSTRAINT CHK_CREATEDAT_TYPES CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_TYPES CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_TYPES_2 CHECK(updatedAt >= createdAt),

);
GO

CREATE TABLE roles
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE,
    status INT NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_STATUS_ROLES CHECK(status IN (0,1)),
    CONSTRAINT CHK_NAME_ROLES CHECK(name IN ('admin', 'gerente', 'supervisor', 'vendedor')),
    CONSTRAINT CHK_ID_ROLES CHECK(id IN (1,2,3,4)),
    CONSTRAINT CHK_CREATEDAT_ROLES CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_ROLES CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_ROLES_2 CHECK(updatedAt >= createdAt),
);
GO

CREATE TABLE addresses
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    street VARCHAR(50) NOT NULL,
    number INT NOT NULL,
    city VARCHAR(30) NOT NULL,
    province VARCHAR(30) NOT NULL,
    postal_code VARCHAR(8) NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_POSTAL_CODE_ADDRESSES CHECK(LEN(postal_code) BETWEEN 4 AND 8),
    CONSTRAINT CHK_CREATEDAT_ADDRESSES CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_ADDRESSES CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_ADDRESSES_2 CHECK(updatedAt >= createdAt),
);
GO

CREATE TABLE payment_methods
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    description VARCHAR(30) NOT NULL UNIQUE,
    status INT NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_PAYMENT_METHOD_STATUS_PAYMENT_METHODS CHECK(status IN(0,1)),
    CONSTRAINT CHK_CREATEDAT_PAYMENT_METHODS CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_PAYMENT_METHODS CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_PAYMENT_METHODS_2 CHECK(updatedAt >= createdAt),
);

CREATE TABLE billing_types
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    description VARCHAR(30) NOT NULL UNIQUE,
    status INT NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_BILLING_TYPE_STATUS_BILLING_TYPES CHECK(status IN(0,1)),
    CONSTRAINT CHK_CREATEDAT_BILLING_TYPES CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_BILLING_TYPES CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_BILLING_TYPES_2 CHECK(updatedAt >= createdAt),
);

CREATE TABLE users
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    surname VARCHAR(30) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    dni VARCHAR(10) NOT NULL UNIQUE,
    address_id INT,
    status INT NOT NULL,
    phone VARCHAR(20) NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_DNI_USERS CHECK(LEN(dni) BETWEEN 7 AND 8),
    CONSTRAINT CHK_STATUS_USERS CHECK(status IN (0,1,2)),
    CONSTRAINT FK_address_id_USERS FOREIGN KEY(address_id) REFERENCES addresses(id),
    CONSTRAINT CHK_EMAIL_USERS CHECK(email LIKE '%@%.%'),
    CONSTRAINT CHK_CREATEDAT_USERS CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_USERS CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_USERS_2 CHECK(updatedAt >= createdAt),
);

CREATE TABLE customers
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,

    CONSTRAINT FK_user_id_CUSTOMERS FOREIGN KEY(user_id) REFERENCES users(id),
);

CREATE TABLE employees
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    username VARCHAR(30) NOT NULL UNIQUE,
    pass VARCHAR(100) NOT NULL,
    user_id INT NOT NULL,
    role_id INT NOT NULL,

    CONSTRAINT FK_user_id_EMPLOYEES FOREIGN KEY(user_id) REFERENCES users(id),
    CONSTRAINT FK_role_id_EMPLOYEES FOREIGN KEY(role_id) REFERENCES roles(id),
    CONSTRAINT CHK_ROLE_ID_EMPLOYEES CHECK(role_id IN(1,2,3,4)),
    CONSTRAINT CHK_USERNAME_EMPLOYEES CHECK(LEN(username)>=6)
);
GO

CREATE TABLE products
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(150) NOT NULL,
    price FLOAT NOT NULL,
    imagen VARCHAR(150) NOT NULL UNIQUE,
    stock INT NOT NULL,
    category_id INT NOT NULL,
    type_id INT NOT NULL,
    status INT NOT NULL,
    active INT NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    createdById INT NOT NULL,
    updatedAt DATETIME NULL,
    updatedById INT NULL,

    CONSTRAINT CHK_PRODUCT_STATUS_PRODUCTS CHECK(status IN(0,1)),
    CONSTRAINT CHK_PRODUCT_ACTIVE_PRODUCTS CHECK(active IN (0,1)),
    CONSTRAINT CHK_STOCK_PRODUCTS CHECK(stock >= 0),
    CONSTRAINT CHK_PRICE_PRODUCTS CHECK(price >= 0),
    CONSTRAINT FK_category_id_PRODUCTS FOREIGN KEY(category_id) REFERENCES categories(id),
    CONSTRAINT FK_type_id_PRODUCTS FOREIGN KEY(type_id) REFERENCES types(id),
    CONSTRAINT CHK_CREATEDAT_PRODUCTS CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_PRODUCTS CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_PRODUCTS_2 CHECK(updatedAt >= createdAt),
    CONSTRAINT FK_createdById_PRODUCTS FOREIGN KEY(createdById) REFERENCES employees(id),
    CONSTRAINT FK_updatedById_PRODUCTS FOREIGN KEY(updatedById) REFERENCES employees(id)

);
GO

CREATE TABLE orders
(
    id INT IDENTITY(1,1) PRIMARY KEY,
    customer_id INT,
    employee_id INT NOT NULL,
    customer_cuit VARCHAR(14) NULL,
    status INT NOT NULL,
    total_price FLOAT NOT NULL,
    payment_method_id INT NOT NULL,
    billing_type_id INT NOT NULL,
    createdAt DATETIME DEFAULT GETDATE(),
    updatedAt DATETIME NULL,

    CONSTRAINT CHK_ORDER_STATUS_ORDERS CHECK(status IN(0,1)),
    CONSTRAINT FK_customer_id_ORDERS FOREIGN KEY(customer_id) REFERENCES customers(id),
    CONSTRAINT FK_employee_id_ORDERS FOREIGN KEY(employee_id) REFERENCES employees(id),
    CONSTRAINT FK_payment_method_id_ORDERS FOREIGN KEY(payment_method_id) REFERENCES payment_methods(id),
    CONSTRAINT FK_billing_type_id_ORDERS FOREIGN KEY(billing_type_id) REFERENCES billing_types(id),
    CONSTRAINT CHK_CREATEDAT_ORDERS CHECK(createdAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_ORDERS CHECK(updatedAt <= GETDATE()),
    CONSTRAINT CHK_UPDATEDAT_ORDERS_2 CHECK(updatedAt >= createdAt),
    CONSTRAINT CHK_TOTAL_PRICE_ORDERS CHECK(total_price >= 0),
);
GO

CREATE TABLE order_products
(
    order_id INT,
    product_id INT,
    price FLOAT NOT NULL,
    amount INT NOT NULL,

    CONSTRAINT CHK_AMOUNT_ORDER_PRODUCTS CHECK(amount >= 0),
    CONSTRAINT FK_order_id_ORDER_PRODUCTS FOREIGN KEY(order_id) REFERENCES orders(id),
    CONSTRAINT FK_product_id_ORDER_PRODUCTS FOREIGN KEY(product_id) REFERENCES products(id),
    CONSTRAINT PK_order_product PRIMARY KEY (order_id, product_id),
    CONSTRAINT CHK_PRICE_ORDER_PRODUCTS CHECK(price >= 0),
);
GO
